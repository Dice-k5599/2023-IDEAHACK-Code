#define USE_ARDUINO_INTERRUPTS true   
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <PulseSensorPlayground.h>     // Includes the PulseSensorPlayground Library.   

// OLED FeatherWing buttons map to different pins depending on board.
// The I2C (Wire) bus may also be different.
#if defined(ESP8266)
#define BUTTON_A  0
#define BUTTON_B 16
#define BUTTON_C  2
#define WIRE Wire
#elif defined(ESP32)
#define BUTTON_A 15
#define BUTTON_B 32
#define BUTTON_C 14
#define WIRE Wire
#elif defined(ARDUINO_STM32_FEATHER)
#define BUTTON_A PA15
#define BUTTON_B PC7
#define BUTTON_C PC5
#define WIRE Wire
#elif defined(TEENSYDUINO)
#define BUTTON_A  4
#define BUTTON_B  3
#define BUTTON_C  8
#define WIRE Wire
#elif defined(ARDUINO_FEATHER52832)
#define BUTTON_A 31
#define BUTTON_B 30
#define BUTTON_C 27
#define WIRE Wire
#elif defined(ARDUINO_ADAFRUIT_FEATHER_RP2040)
#define BUTTON_A  9
#define BUTTON_B  8
#define BUTTON_C  7
#define WIRE Wire1
#else // 32u4, M0, M4, nrf52840 and 328p
#define BUTTON_A  9
#define BUTTON_B  6
#define BUTTON_C  5
#define WIRE Wire
#endif

//definitions of constants, pins, variables

// for oled screen
#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display = Adafruit_SSD1306(128, 64, &WIRE);

// for 4 button keys
const int buttonPin[] = {9,10,11,12};     // the number of the pushbutton pins
const int ledPin =  6;      // the number of the LED pin

// for heartbeat sensor
const int PulseWire = 0;       // PulseSensor PURPLE WIRE connected to ANALOG PIN 0
int Threshold = 550;           // Determine which Signal to "count as a beat" and which to ignore.
// Use the "Gettting Started Project" to fine-tune Threshold Value beyond default setting.
// Otherwise leave the default "550" value.

PulseSensorPlayground pulseSensor;  // Creates an instance of the PulseSensorPlayground object called "pulseSensor"

// for viberating motor
const int VM = 7;//the number of the Viberating motor pin

const int LED_PIN = 3; //pin for LED

// for switch button
// constants won't change. They're used here to set pin numbers:
const int BUTTONPIN = 4;  // the number of the pushbutton pin
// variables that will change:
int buttonState = 0;  // variable for reading the pushbutton status

void setup() {
  Serial.begin(9600);


  // set up for OLED screen----------------------------------------------
  Serial.println("OLED FeatherWing test");
  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C); // Address 0x3C for 128x32

  Serial.println("OLED begun");

  // Show image buffer on the display hardware.
  // Since the buffer is intialized with an Adafruit splashscreen
  // internally, this will display the splashscreen.
  display.display();
  delay(1000);

  // Clear the buffer.
  display.clearDisplay();
  display.display();

  Serial.println("IO test");

  pinMode(BUTTON_A, INPUT_PULLUP);
  pinMode(BUTTON_B, INPUT_PULLUP);
  pinMode(BUTTON_C, INPUT_PULLUP);

  // set up for heartbeat sensor------------------------------------------
  pulseSensor.analogInput(PulseWire);
  pulseSensor.setThreshold(Threshold);

  // Double-check the "pulseSensor" object was created and "began" seeing a signal.
  if (pulseSensor.begin()) {
    Serial.println("Welcome, Healthy Hacker!");  //This prints one time at Arduino power-up,  or on Arduino reset.
  }

  // set up for 4 button keypad--------------------------------------------- 
  // initialize the keypad pin(s) as an input:
  for(int x=0; x<4; x++)
  {
    pinMode(buttonPin[x], INPUT_PULLUP); 
  }  

  // set up for vibrating motor---------------------------
  pinMode(VM,OUTPUT);//initialize the digital pin as an output
  pinMode(LED_PIN, OUTPUT);

  // set up for button
  //initialize the pushbutton pin as an input:
  pinMode(buttonPin, INPUT);

}

int streakCounter = 0;
int highestStreak = 0;
int counter = 0;

void loop() {
  case2();
//  // read the state of the pushbutton value:
//  buttonState = digitalRead(BUTTONPIN);
//
//  // check if the pushbutton is pressed. If it is, the buttonState is HIGH:
//  if (buttonState == HIGH) {
//    Serial.println("Button is not pressed");
//    case1();
//  } else {
//    Serial.println("Button is pressed");
//    case2();
//  }
  delay(1000);

//int buttonPressed = 0;
//for(int i = 0; i < 4; i++)
//{
//  //signifying the state of which the button is in by reading the appropriate pin #
//  buttonState = digitalRead(buttonPin[i]);
//
//
//  // check if the pushbutton on the keypad is pressed.
//  // if it is, the buttonState is LOW:
//  // when the D9 pin is LOW, that means 1 was pressed
//  if (buttonState == LOW && buttonPin[i] == 9) {    
//    buttonPressed = 1;
//  }
//
//  else if (buttonState == LOW && buttonPin[i] == 10) {    
//    buttonPressed = 2;
//  }
//
//  else if (buttonState == LOW && buttonPin[i] == 11) {    
//    buttonPressed = 3;
//  }
//
//  else if (buttonState == LOW && buttonPin[i] == 12) {    
//    buttonPressed = 4;
//  }
//}

//  int key1S = digitalRead(9);
//  int key2S = digitalRead(10);
//  int key3S = digitalRead(11);
//  int key4S = digitalRead(12);
//
//  if(!key1S) {
//    Serial.println("key 1 was pressed");
//    // set up for initial screen
//    //clear screen
//    case2();
//  }
//  if(!key2S) {
//    Serial.println("key 2 was pressed");
//    //case2();
//  }
//  if(!key3S) {
//    Serial.println("key 3 was pressed");
//  }
//  if(!key4S) {
//    Serial.println("key 4 was pressed");
//  }

//switch(buttonPressed) {
//   case 1: 
//      // set up for initial screen
//      //clear screen
//      display.clearDisplay();
//      display.setTextSize(1);
//      display.setTextColor(SSD1306_WHITE);
//      display.setCursor(2, 2);
//      display.print("1. Power Button");
//      display.setCursor(2, 20);
//      display.print("2. Start Exercise");
//      display.setCursor(2, 40);
//      display.print("3. Show Progress");
//      display.setCursor(2, 57);
//      display.print("4. End Excercise");
//      display.display();
//      break;
//
//    case 0:
//      display.clearDisplay();
//      break;
//    case 1:
//      int age = 20; // user input (set as static variable for now);
//      const int MAXHEARTRATE = 220 - age; // calculation of max heart rate for different cardio zones
//      float userHeartRate = pulseSensor.getBeatsPerMinute();  // Calls function on our pulseSensor object that returns BPM as a "float".
//      int userHeartRate2 = (int)userHeartRate;
//      int constrainedUHR = constrain(userHeartRate, 0, MAXHEARTRATE); // Constrain heart rate to be from 0 to max HR
//      int percentage = map(constrainedUHR, 0, MAXHEARTRATE, 0, 128); // map constrained user's heart rate from 0 to max to 0 to max x coordinate
//      
//      int sixtyPercent = MAXHEARTRATE * 0.60;
//      int eightyPercent = MAXHEARTRATE * 0.80;
//      bool zoneOne = false; // below ideal
//      bool zoneTwo = false; // ideal HR zone
//      bool zoneThree = false; // above ideal
//      
//      //clear and reset display each loop
//      display.clearDisplay();
//      
//      // text display tests
//      display.setTextSize(1);
//      display.setTextColor(SSD1306_WHITE);
//      display.setCursor(2, 2);
//      display.print("BPM: ");
//      display.setCursor(80, 2);
//      display.setTextSize(2);
//      display.print(userHeartRate2);
//      display.setTextSize(2);
//      display.setCursor(2,20);
//      if (constrainedUHR < sixtyPercent) { // below optimal
//        
//        // print heart rate and only set relevant flags to true
//        Serial.print("Heart Rate: ");
//        Serial.print(constrainedUHR);
//        Serial.println("    ---- Speed up to reach optimal HR zone");
//        zoneOne = true;
//        zoneTwo = false;
//        zoneThree = false;
//      
//        display.print("Speed up!");
//      
//        //reset active streak counter
//        streakCounter = 0;
//      }
//      else if (constrainedUHR > eightyPercent) { // above optimal
//        // red LED turns on;
//        Serial.print("Heart Rate: ");
//        Serial.print(constrainedUHR);
//        Serial.println("    ---- Slow down to reach optimal HR zone");
//        zoneOne = false;
//        zoneTwo = false;
//        zoneThree = true;
//      
//        display.print("Slow down!");
//
//        //vibrating motor when too high
//          digitalWrite(VM,HIGH);//turn the VR on 
//          delay(50);               //wait for half a second
//          digitalWrite(VM,LOW); //turn the VR off
//          delay(50);               //wait for half a second
//
//      
//        //reset active streak counter
//        streakCounter = 0;
//      }
//      else { // optimal
//        // Green LED turns on or blinking LED
//      
//        Serial.print("Heart Rate: ");
//        Serial.print(constrainedUHR);
//        Serial.println("Great job! You have achieved optimal HR");
//        zoneOne = false;
//        zoneTwo = true;
//        zoneThree = false;
//      
//        display.print("Great job!");
//      
//        //increment active streak counter
//        streakCounter++;
//        if(streakCounter > highestStreak) {
//          highestStreak = streakCounter;
//        }
//      }
//      
//      display.setTextSize(1);
//      display.setCursor(2,40);
//      display.print("Active Streak: ");
//      display.print(streakCounter);
//      display.print(" pts");
//      
//      display.setTextSize(1);
//      display.setCursor(0,0);
//      
//      // for status bar frame
//      for (int i = 57; i < 62; i++) {
//        display.drawPixel(0, i, 1);
//        display.drawPixel(1, i, 1);
//        display.drawPixel(126, i, 1);
//        display.drawPixel(127, i, 1);
//      }
//      
//      for (int i = 0; i < MAXHEARTRATE; i++) {
//        display.drawPixel(i, 57, 1);
//        display.drawPixel(i, 62, 1);
//      }
//      
//      // for updating status bar according to user's heartbeat
//      for (int i = 0; i < percentage; i++) { // show a bar that fills up to the user's percentage
//        for (int k = 58; k < 61; k++) {
//          display.drawPixel(i, k, 1);
//        }
//      }
//      
//      display.display();
//      delay(1000);
//      break;
//  }
//      //end of case 2
}

void case1() {
    // set up for initial screen
    //clear screen
    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(2, 2);
    display.print("1. Power Button");
    display.setCursor(2, 20);
    display.print("2. Start Exercise");
    display.setCursor(2, 40);
    display.print("3. Show Progress");
    display.setCursor(2, 57);
    display.print("4. End Excercise");
    display.display();
}
      
void case2() {
      
      int age = 20; // user input (set as static variable for now);
      const int MAXHEARTRATE = 220 - age; // calculation of max heart rate for different cardio zones
      float userHeartRate = pulseSensor.getBeatsPerMinute();  // Calls function on our pulseSensor object that returns BPM as a "float".
      int userHeartRate2 = (int)userHeartRate;
      int constrainedUHR = constrain(userHeartRate, 0, MAXHEARTRATE); // Constrain heart rate to be from 0 to max HR
      int percentage = map(constrainedUHR, 0, MAXHEARTRATE, 0, 128); // map constrained user's heart rate from 0 to max to 0 to max x coordinate
      int sixtyPercent = MAXHEARTRATE * 0.60;
      int eightyPercent = MAXHEARTRATE * 0.80;
      
      //clear and reset display each loop
      display.clearDisplay();
      
      // text display tests
      display.setTextSize(1);
      display.setTextColor(SSD1306_WHITE);
      display.setCursor(2, 2);
      display.print("BPM: ");
      display.setCursor(80, 2);
      display.setTextSize(2);
      display.print(userHeartRate2);
      display.setTextSize(2);
      display.setCursor(2,20);
      if (constrainedUHR < sixtyPercent) { // below optimal
        //LED off below optimal
        lightOff();

        // print heart rate and only set relevant flags to true
        Serial.print("Heart Rate: ");
        Serial.print(constrainedUHR);
        Serial.println("    ---- Speed up to reach optimal HR zone");
      
        display.print("Speed up!");
      
        //reset active streak counter
        streakCounter = 0;
      }
      else if (constrainedUHR > eightyPercent) { // above optimal
        // LED blinks above optimal
        lightBlink();

        Serial.print("Heart Rate: ");
        Serial.print(constrainedUHR);
        Serial.println("    ---- Slow down to reach optimal HR zone");
      
        display.print("Slow down!");

        //vibrating motor when too high
          digitalWrite(VM,HIGH);//turn the VR on 
          delay(50);               //wait for half a second
          digitalWrite(VM,LOW); //turn the VR off
          delay(50);               //wait for half a second

      
        //reset active streak counter
        streakCounter = 0;
      }
      else { // optimal
        // LED turns on at optimal
        lightOn();
        
        Serial.print("Heart Rate: ");
        Serial.print(constrainedUHR);
        Serial.println("Great job! You have achieved optimal HR");
      
        display.print("Great job!");
      
        //increment active streak counter
        streakCounter++;
        if(streakCounter > highestStreak) {
          highestStreak = streakCounter;
        }
      }
      
      display.setTextSize(1);
      display.setCursor(2,40);
      display.print("Active Streak: ");
      display.print(streakCounter);
      display.print(" pts");
      
      display.setTextSize(1);
      display.setCursor(0,0);
      
      // for status bar frame
      for (int i = 57; i < 62; i++) {
        display.drawPixel(0, i, 1);
        display.drawPixel(1, i, 1);
        display.drawPixel(126, i, 1);
        display.drawPixel(127, i, 1);
      }
      
      for (int i = 0; i < MAXHEARTRATE; i++) {
        display.drawPixel(i, 57, 1);
        display.drawPixel(i, 62, 1);
      }
      
      // for updating status bar according to user's heartbeat
      for (int i = 0; i < percentage; i++) { // show a bar that fills up to the user's percentage
        for (int k = 58; k < 61; k++) {
          display.drawPixel(i, k, 1);
        }
      }
      
      display.display();
      delay(1000);
}



void lightOn() {
  digitalWrite(LED_PIN, HIGH);
}

void lightOff() {
  digitalWrite(LED_PIN, LOW);
}

void lightBlink() {
  digitalWrite(LED_PIN, HIGH);
  delay(100);
  digitalWrite(LED_PIN, LOW);
  delay(100);
}
